Steps to setup kubernetes labs

Perform the below step in all the 3 vms




1.setup hostnames with ipaddress

vi /etc/hosts


192.168.87.141 kmaster kmaster.myserver.com
192.168.87.142 knode1 knode1.myserver.com
192.168.87.143 knode2 knode2.myserver.com


in kmaster
hostnamectl set-hostname kmaster.myserver.com

in knode1
hostnamectl set-hostname knode1.myserver.com

in knode2
hostnamectl set-hostname knode2.myserver.com

2. disable the selinux and enable  br_netfilter Kernel Module (iptables for filtering,pods communication)

vi /etc/selinux/config

set to SELINUX= disabled


disable the firewall

systemctl status firewalld
systemctl stop firewalld && systemctl disable firewalld && systemctl status firewalld


3. set the netfilter kernel modules (iptables for filterings for pods commu
nications)


modprobe br_netfilter

echo '1' > /proc/sys/net/bridge/bridge-nf-call-iptables

4. Disable SWAP

swapoff -a

5.vi /etc/fstab   (not required for Azure Linux vms)

comment

# #/dev/mapper/cl-swap


6.  yum install yum-utils device-mapper-persistent-data lvm2

yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo


sudo yum install docker-ce

docker -v


7.   Install Kubernetes

Add the kubernetes repository to the centos 7 system by running the following command.

copy and paste the below in commandline

cat <<EOF > /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg
        https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
EOF


8.  yum install -y kubelet kubeadm kubectl

After the installation is complete, restart all those servers.

sudo reboot



9. Log in again to the server and start the services, docker and kubelet.

systemctl start docker && systemctl enable docker
systemctl start kubelet && systemctl enable kubelet

10. Change the cgroup-driver
cgroups (control groups) is a Linux kernel feature that limits, accounts for, and isolates the resource usage (CPU, memory, disk I/O, network, etc.) of a collection of processes.



docker info | grep -i cgroup


Now run the command below to change the kuberetes cgroup-driver to 'cgroupfs'.

**** sed -i 's/cgroup-driver=systemd/cgroup-driver=cgroupfs/g' /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
sed -i 's/cgroup-driver=systemd/cgroup-driver=cgroupfs/g' /usr/lib/systemd/system/kubelet.service.d/10-kubeadm.conf

/usr/lib/systemd/system/kubelet.service.d/10-kubeadm.conf
Reload the systemd system and restart the kubelet service.

systemctl daemon-reload
systemctl restart kubelet

complete the above steps in all machines( master node machines)


------------------------------------------------------------------------------------------------------------------




Step 11   - Kubernetes Cluster Initialization (in Master Machine Only)

kubeadm init --apiserver-advertise-address=192.168.198.188 --pod-network-cidr=10.244.0.0/16
